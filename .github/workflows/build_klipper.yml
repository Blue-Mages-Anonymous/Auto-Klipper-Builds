name: Build Klipper Firmware

on:
  schedule:
    - cron: '0 0 * * *'  # Run daily at midnight UTC
  workflow_dispatch:      # Allow manual trigger

permissions:
  contents: write

jobs:
  check_version:
    runs-on: self-hosted
    outputs:
      build_needed: ${{ steps.check_version.outputs.build_needed }}
      version: ${{ steps.check_version.outputs.version }}
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Check for new Klipper version
      id: check_version
      run: |
        git clone https://github.com/Klipper3d/klipper.git temp_klipper
        cd temp_klipper
        LATEST_TAG=$(git describe --tags --always)
        cd ..
        rm -rf temp_klipper
        
        # Check if we already have this version
        if git ls-remote --tags origin | grep -q "$LATEST_TAG"; then
          echo "Version $LATEST_TAG already built"
          echo "build_needed=false" >> $GITHUB_OUTPUT
        else
          echo "New version $LATEST_TAG found"
          echo "build_needed=true" >> $GITHUB_OUTPUT
          echo "version=$LATEST_TAG" >> $GITHUB_OUTPUT
        fi

  build:
    needs: check_version
    if: needs.check_version.outputs.build_needed == 'true'
    runs-on: self-hosted
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-arm-none-eabi binutils-arm-none-eabi binutils g++ python3-pip tree file
        pip3 install -U platformio
    
    - name: Build firmware
      id: build
      run: |
            chmod +x ./build_klipper.sh
            ./build_klipper.sh
            # Capture the whole content of board_list.txt including formatting
            BOARD_LIST=$(cat board_list.txt)
            # Use delimiter syntax to handle multi-line strings
            echo "board_list<<EOF" >> $GITHUB_OUTPUT
            echo "$BOARD_LIST" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT

    - name: Debug Directory Contents
      run: |
        pwd
        tree -L 6
        ls -la
        ls -la firmware_binaries/

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.check_version.outputs.version }}
        release_name: Klipper ${{ needs.check_version.outputs.version }} Firmware Builds
        body: |
          Automated firmware builds for Klipper version ${{ needs.check_version.outputs.version }}

          ```
          ${{ steps.build.outputs.board_list }}
          ```

          Each firmware file is named according to its target board.
        draft: false
        prerelease: false

    - name: Upload Release Assets
      run: |
        for file in firmware_binaries/*; do
          curl \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: $(file -b --mime-type $file)" \
            --data-binary @$file \
            "https://uploads.github.com/repos/${{ github.repository }}/releases/${{ steps.create_release.outputs.id }}/assets?name=$(basename $file)"
        done

    - name: Cleanup build
      if: always()
      run: |
        echo "Initial workspace at: $GITHUB_WORKSPACE"
        cd $RUNNER_WORKSPACE
        echo "Runner workspace at: $RUNNER_WORKSPACE"
        rm -rf ${GITHUB_WORKSPACE##*/}